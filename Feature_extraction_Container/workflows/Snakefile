configfile: "config/config.yaml"

import os

# Helper function to get the appropriate fMRI file for a subject
def get_fmri_file(wildcards):
    return os.path.join(
        config["bids_derivatives_dir"],
        wildcards.subject,
        "func",
        f"{wildcards.subject}_task-{config.get('task', 'rest')}_space-{config.get('space', 'MNI152NLin2009cAsym')}_desc-preproc_bold.nii.gz"
    )

# Helper function to get the appropriate mask file for a subject
def get_mask_file(wildcards):
    return os.path.join(
        config["bids_derivatives_dir"],
        wildcards.subject,
        "func",
        f"{wildcards.subject}_task-{config.get('task', 'rest')}_space-{config.get('space', 'MNI152NLin2009cAsym')}_desc-brain_mask.nii.gz"
    )

# Define output directory structure
def get_output_dir(wildcards):
    return os.path.join(
        config["bids_derivatives_dir"],
        wildcards.subject,
        "func",
        "Analytical_metrics"
    )

# All outputs rule
rule all:
    input:
        # ALFF outputs
        expand(os.path.join(
            config["output_dir"],
            "{subject}",
            "func",
            "Analytical_metrics",
            "ALFF",
            "{subject}_alff.nii.gz"
        ), subject=config["subjects"]),
        
        # fALFF outputs (if enabled)
        expand(os.path.join(
            config["output_dir"],
            "{subject}",
            "func",
            "Analytical_metrics",
            "ALFF",
            "{subject}_falff.nii.gz"
        ), subject=config["subjects"]) if config.get("compute_falff", True) else [],
        
        # ReHo outputs
        expand(os.path.join(
            config["output_dir"],
            "{subject}",
            "func",
            "Analytical_metrics",
            "ReHo",
            "{subject}_reho.nii.gz"
        ), subject=config["subjects"]),
        
        # Hurst exponent outputs
        expand(os.path.join(
            config["output_dir"],
            "{subject}",
            "func",
            "Analytical_metrics",
            "Hurst",
            "{subject}_hurst.nii.gz"
        ), subject=config["subjects"]) if config.get("compute_hurst", True) else [],
        
        # Fractal dimension outputs
        expand(os.path.join(
            config["output_dir"],
            "{subject}",
            "func",
            "Analytical_metrics",
            "Fractal",
            "{subject}_fractal.nii.gz"
        ), subject=config["subjects"]) if config.get("compute_fractal", True) else [],
        
        # QM FFT outputs
        expand(os.path.join(
            config["output_dir"],
            "{subject}",
            "func",
            "Analytical_metrics",
            "QM_FFT",
            "{subject}_qm_fft.h5"
        ), subject=config["subjects"]) if config.get("compute_qm_fft", True) else [],
        
        # RSN activity outputs
        expand(os.path.join(
            config["output_dir"],
            "{subject}",
            "func",
            "Analytical_metrics",
            "RSN",
            "{subject}_rsn_activity.h5"
        ), subject=config["subjects"]) if config.get("compute_rsn", True) else []

# Rule to compute ReHo
rule compute_reho:
    input:
        fmri = get_fmri_file,
        mask = get_mask_file
    output:
        reho = os.path.join(
            config["output_dir"],
            "{subject}",
            "func",
            "Analytical_metrics",
            "ReHo",
            "{subject}_reho.nii.gz"
        )
    params:
        neighborhood = config.get("reho_neighborhood", 27)
    shell:
        "mkdir -p $(dirname {output.reho}) && export PATH=$CONDA_PREFIX/bin:$PATH && python /app/scripts/reho_test.py --fmri {input.fmri} --output {output.reho} --mask {input.mask} --neighborhood {params.neighborhood}"

 rule compute_alff:
     input:
-        fmri = "{bids_derivatives_dir}/{subject}/func/{subject}_task-{task}_space-{space}_desc-preproc_bold.nii.gz",
-        mask = config.get("alff_mask", None)
+        fmri = "{bids_derivatives_dir}/{subject}/func/{subject}_task-{task}_space-{space}_desc-preproc_bold.nii.gz",
+        mask = config.get("alff_mask", None)
     output:
-        alff = "{output_dir}/{subject}_task-{task}_alff.nii.gz"
+        alff   = "{output_dir}/{subject}_task-{task}_ALFF.nii.gz",
+        malff  = "{output_dir}/{subject}_task-{task}_mALFF.nii.gz",
+        falff  = "{output_dir}/{subject}_task-{task}_fALFF.nii.gz",
+        rsfa   = "{output_dir}/{subject}_task-{task}_RSFA.nii.gz"
     params:
-        tr        = config["tr"],
-        band_low  = config.get("alff_band_low", 0.01),
-        band_high = config.get("alff_band_high", 0.08)
+        tr        = config["tr"],
+        band_low  = config.get("alff_band_low", 0.01),
+        band_high = config.get("alff_band_high", 0.08)
     shell:
-        "python /app/scripts/alff.py "
-        "--fmri {input.fmri} "
-        "--mask {input.mask or ''} "
-        "--output {wildcards.subject}_{wildcards.task}_rsfc_maps/ "
-        "--tr {params.tr}"
+        "python /app/scripts/alff.py "
+        "--fmri {input.fmri} "
+        "{('--mask '+input.mask) if input.mask else ''} "
+        "--output {output_dir}/{subject}_{task}_rsfc_maps/ "
+        "--tr {params.tr} "
+        "--low {params.band_low} "
+        "--high {params.band_high}"
+
+    # downstream consumers should pick up ALFF/mALFF/fALFF/RSFA under the rsfc_maps folder

 rule compute_hurst:
     input:
         fmri = ...,
         mask = config["atlas_path"]
     output:
         hurst = "{output_dir}/{subject}_task-{task}_hurst.nii.gz"
     shell:
-        "python /app/scripts/hurst_test.py "
-        "--fmri {input.fmri} --atlas {input.mask} "
-        "--output {output.hurst}"
+        "python /app/scripts/hurst_test.py "
+        "--fmri {input.fmri} "
+        "--atlas {input.mask} "
+        "--output {output.hurst} "
+        "--n-jobs {config.get('n_jobs',8)} "
+        "--min-var {config.get('min_var',1e-6)}"

 rule compute_fractal:
     input:
         fmri = ...,
         mask = config["atlas_path"]
     output:
         fractal = "{output_dir}/{subject}_task-{task}_fd.nii.gz"
     shell:
-        "python /app/scripts/fractal_test.py "
-        "--fmri {input.fmri} --atlas {input.mask} --output {output.fractal}"
+        "python /app/scripts/fractal_test.py "
+        "--fmri {input.fmri} "
+        "--atlas {input.mask} "
+        "--output {output.fractal} "
+        "--method {config.get('fd_method','hfd')} "
+        "--kmax {config.get('kmax',64)} "
+        "--n-jobs {config.get('n_jobs',8)} "
+        "--min-var {config.get('min_var',1e-6)}"
# Rule to compute QM FFT features
rule compute_qm_fft:
    input:
        fmri = get_fmri_file,
        mask = get_mask_file
    output:
        qm_fft = os.path.join(
            config["output_dir"],
            "{subject}",
            "func",
            "Analytical_metrics",
            "QM_FFT",
            "{subject}_qm_fft.h5"
        )
    params:
        subject_id = lambda wildcards: wildcards.subject,
        eps = config.get("qm_fft_eps", 1e-6),
        radius = config.get("qm_fft_radius", 0.6),
        local_k = config.get("qm_fft_local_k", 5),
        sample_flag = "--sample"
    shell:
        """
        mkdir -p $(dirname {output.qm_fft})
        python /app/scripts/qm_fft_test.py \
            --fmri {input.fmri} \
            --mask {input.mask} \
            --output_h5 {output.qm_fft} \
            --subject_id {params.subject_id} \
            --eps {params.eps} \
            --radius {params.radius} \
            --local_k {params.local_k} \
            {params.sample_flag}
        """

# Rule to extract resting state network (RSN) activity
rule extract_rsn:
    input:
        fmri = get_fmri_file,
        mask = get_mask_file
    output:
        rsn_h5 = os.path.join(
            config["output_dir"],
            "{subject}",
            "func",
            "Analytical_metrics",
            "RSN",
            "{subject}_rsn_activity.h5"
        )
    params:
        subject_id = lambda wildcards: wildcards.subject,
        sample_flag = "--sample",
        sample_tp = config.get("rsn_sample_tp", 100),
        output_dir = lambda wildcards, output: os.path.dirname(output.rsn_h5)
    shell:
        """
        mkdir -p {params.output_dir}
        python /app/scripts/rsn_extraction_test.py \
            --fmri {input.fmri} \
            --mask {input.mask} \
            --output_dir {params.output_dir} \
            --subject_id {params.subject_id} \
            {params.sample_flag} \
            --sample_tp {params.sample_tp}
        """ 